name: GitOps CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine next version
        id: determine-version
        run: |
          current_version=$(kubectl get svc hello-gitops -n hello-gitops-argocd -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "none")
          if [[ "$current_version" == "blue" ]]; then
            echo "next_version=green" >> $GITHUB_ENV
          else
            echo "next_version=blue" >> $GITHUB_ENV
          fi
          echo "Next version: ${{ env.next_version }}"

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/hello-gitops:${{ env.next_version }} ./app
          docker push ${{ secrets.DOCKER_USERNAME }}/hello-gitops:${{ env.next_version }}

      - name: Update kustomization.yaml
        run: |
          sed -i "s|newName:.*|newName: ${{ secrets.DOCKER_USERNAME }}/hello-gitops:${{ env.next_version }}|" app/k8s/kustomization.yaml

      - name: Commit and push deployment changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add app/k8s/kustomization.yaml
          git commit -m "Update deployment to use image ${{ secrets.DOCKER_USERNAME }}/hello-gitops:${{ env.next_version }}"
          git push

  deploy-to-aws-and-argocd:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install kustomize
        run: |
          curl -sL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz | tar xz
          sudo mv kustomize /usr/local/bin/

      - name: Deploy to AWS using kustomize
        run: |
          cd app/k8s
          kustomize build . | kubectl apply -n hello-gitops-argocd -f -

      - name: Install ArgoCD CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Log in to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      - name: Sync ArgoCD application
        run: |
          argocd app sync hello-gitops
          argocd app wait hello-gitops --health
